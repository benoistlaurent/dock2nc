#!/usr/bin/env python

"""Convert ASCII docking files into netCDF docking files."""


import argparse
import logging
import os
import tarfile
import sys

import dock2nc


LOGGING_FORMAT = "%(asctime)s - %(name)s - %(levelname)s: %(message)s"
logging.basicConfig(format=LOGGING_FORMAT, level=logging.INFO)
logger = logging.getLogger(os.path.basename(sys.argv[0]))


def parse_command_line():
    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--version', action='version', version='%(prog)s ' + dock2nc.__version__)
    parser.add_argument('dockfiles', nargs='+',
                        help='tarball containing docking files')
    parser.add_argument('pdbfiles',
                        help='tarball containing PDB files')
    return parser.parse_args()


def convert_from_tar(tarball, pdbfiles):
    logger.debug("Start converting {}".format(tarball))
    outputdir = os.path.splitext(os.path.basename(tarball))[0]
    tar = tarfile.open(tarball)

    logger.info("Output directory: {}".format(outputdir))
    if not os.path.exists(outputdir):
        os.mkdir(outputdir)

    names = tar.getnames()
    number_of_tasks = len(names)
    eta = dock2nc.eta.ETA(number_of_tasks)
    for i, fname in enumerate(names):
        if (i % 10 == 0):
            msg = "{}: file {}/{} (ETA: {})"
            msg = msg.format(tarball, i + 1, number_of_tasks, eta.eta())
            logger.info(msg)
            eta.done(10)
        dockfile = os.path.join(tarball, fname)
        dock2nc.convert(dockfile, pdbfiles, outputdir)
    tar.close()
    logger.debug("Done converting {}".format(tarball))


def main():
    args = parse_command_line()
    for tarball in args.dockfiles:
        convert_from_tar(tarball, args.pdbfiles)


if __name__ == '__main__':
    main()
