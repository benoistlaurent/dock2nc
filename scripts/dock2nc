#!/usr/bin/env python

"""Convert ASCII docking files into netCDF docking files."""


import argparse
import logging
import os
import tarfile
import shutil
import sys

import dock2nc


LOGGING_FORMAT = "%(asctime)s - %(levelname)s: %(message)s"
logging.basicConfig(format=LOGGING_FORMAT, level=logging.INFO)
logger = logging.getLogger(os.path.basename(sys.argv[0]))


def parse_command_line():
    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('--version', action='version', version='%(prog)s ' + dock2nc.__version__)
    parser.add_argument('dockfiles', nargs='+',
                        help='tarball containing docking files')
    parser.add_argument('pdbfiles',
                        help='tarball containing PDB files')
    return parser.parse_args()


def convert_from_tar(tarball, pdbfiles):
    def nc_output_name(dockingfile_name):
        pdbid1, pdbid2 = dockingfile_name.split('--')[:2]
        fname = '{}--{}.nc'.format(pdbid1, pdbid2)
        return os.path.join(outputdir, fname)

    logger.debug("Converting %s", tarball)
    outputdir = os.path.splitext(os.path.basename(tarball))[0]
    tar = tarfile.open(tarball)

    logger.info("Output directory: %s", outputdir)
    if not os.path.exists(outputdir):
        os.mkdir(outputdir)

    names = tar.getnames()
    number_of_tasks = len(names)
    mod = 10 if len(names) > 10 else 1
    for i, fname in enumerate(names):
        if (i % mod == 0):
            msg = "{}: file {}/{}"
            msg = msg.format(tarball, i + 1, number_of_tasks)
            logger.info(msg)
        dockfile = os.path.join(tarball, fname)
        dock2nc.convert(dockfile, pdbfiles, nc_output_name(fname))
    tar.close()

    # Finally create a tarball and removing old files.
    tar_directory(outputdir, outputdir + '_nc.tar')
    remove_directory(outputdir)

    logger.debug("Converting %s done", tarball)


def tar_directory(path, outputpath):
    """Create a tarball of a directory.

    The tarball is named after `path` basename with extension tar.
    """
    logger.debug("Creating archive from %s", path)
    tar = tarfile.open(outputpath, 'w')
    for name in os.listdir(path):
        name = os.path.join(path, name)
        tar.add(name)
    tar.close()
    logger.debug("Creating archive from %s done", path)


def remove_directory(path):
    """Recursively remove a directory."""
    logger.debug("Removing directory %s", path)
    shutil.rmtree(path)


def convert_from_ascii(source, pdbfiles):
    """Convert an ASCII docking file to a NetCDF docking file.

    Args:
        source (str): Path to docking file
        pdbfiles (str): Path to tarball containing PDB files.
    """
    tokens = source.split('--')
    target = '{}--{}.nc'.format(tokens[0], tokens[1])
    logger.info("Converting %s --> %s", source, target)
    dock2nc.convert(source, pdbfiles, target)
    logger.info("Converting %s --> %s done", source, target)


def main():
    args = parse_command_line()
    for source in args.dockfiles:
        if source.endswith('.tar'):
            convert_from_tar(source, args.pdbfiles)
        else:
            convert_from_ascii(source, args.pdbfiles)


if __name__ == '__main__':
    main()
