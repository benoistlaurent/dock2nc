#!/usr/bin/env python

"""
Convert several docking file (located into a tarball) into netCDF docking
files.

Those files contain docking data as well as both PDB files.

Dependencies and subdependencies:
    - python-netcdf4
        - netcdf
        - hdf5
        - numpy
    - mollib
"""


import argparse
import dock2nc
import logging
import os
import tarfile
import sys


LOGGING_FORMAT = "%(asctime)s - %(name)s - %(levelname)s: %(message)s"
logging.basicConfig(format=LOGGING_FORMAT, level=logging.INFO)
logger = logging.getLogger(sys.argv[0])


def parse_command_line():
    parser = argparse.ArgumentParser(description=__doc__,
                                     version=dock2nc.__version__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('dockfiles', nargs='+',
                        help='tarball containing docking files')
    parser.add_argument('pdbfiles',
                        help='tarball containing PDB files')
    return parser.parse_args()


def convert_from_tar(tarball, pdbfiles):
    logger.debug("Start converting {}".format(tarball))
    outputdir = os.path.splitext(os.path.basename(tarball))[0]
    tar = tarfile.open(tarball)

    logger.info("Output directory: {}".format(outputdir))
    if not os.path.exists(outputdir):
        os.mkdir(outputdir)
    
    names = tar.getnames()
    for i, fname in enumerate(names):
        logger.info('{}: file {}/{}'.format(tarball, i + 1, len(names)))
        dockfile = os.path.join(tarball, fname)
        dock2nc.convert(dockfile, pdbfiles, outputdir)
    tar.close()
    logger.debug("Done converting {}".format(tarball))



def main():
    args = parse_command_line()

    for tarball in args.dockfiles:
        convert_from_tar(tarball, args.pdbfiles)
    

if __name__ == '__main__':
    main()
